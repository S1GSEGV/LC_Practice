public class Solution {
    /*
     * @param costs: n x 3 cost matrix
     * @return: An integer, the minimum cost to paint all houses
     */
    public int minCost(int[][] costs) {
        // write your code here
        //int mincost = min( f )
        //dp[i][j] = dp[i][j] + min(dp[i - 1][(j + 1) % 3], dp[i - 1][(j + 2) % 3])ï¼›
        //Update the whole cost array. New cost is the current cost plus the min from previous
        //Previous must not be the same color so need to check j + 1 and j + 2.
        //Use mod to deal with overflow
        if(costs == null || costs.length == 0)
            return 0;
        int n = costs.length;
        int[][] dp = costs;
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < 3; j++) {
                dp[i][j] += Math.min( dp[i-1][(j + 1) % 3], dp[i-1][(j + 2) % 3]);
            }
        }
        return Math.min(Math.min(dp[n-1][0], dp[n-1][1]), dp[n-1][2]);
    }
}